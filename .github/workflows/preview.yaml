name: Preview Deploy

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

permissions:
  id-token: write
  pull-requests: write
  contents: read

jobs:
  preview:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
          
      - name: Install dependencies
        run: pnpm install

      - name: Build for Cloudflare
        run: pnpm run build-opennextjs

      - name: Upload Preview Version
        id: upload
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: ".open-next"
          command: "versions upload --env preview --tag pr-${{ github.event.number }} --message \"Preview for PR #${{ github.event.number }}\""

      - name: Deploy Preview Version
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: ".open-next"
          command: "versions deploy --env preview --percentage 100 --message 'Deploy PR #${{ github.event.number }}' --yes"

      - name: Extract deployment URL
        id: extract-url
        run: |
          DEPLOYMENT_URL="${{ steps.deploy.outputs.deployment-url }}"
          if [ -z "$DEPLOYMENT_URL" ]; then
            # フォールバック: Cloudflareのデフォルトプレビュー形式
            DEPLOYMENT_URL="https://preview.tanzaku-frontend-v2.pages.dev"
          fi
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.extract-url.outputs.url }}';
            const prNumber = context.issue.number;
            
            // 既存のプレビューコメントを検索
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🚀 Preview Deployment')
            );
            
            const commentBody = `🚀 **Preview Deployment**
            
            プレビュー環境にデプロイされました！
            
            📋 **デプロイ情報:**
            - **URL:** ${deploymentUrl}
            - **Commit:** \`${context.sha.substring(0, 7)}\`
            - **Branch:** \`${context.payload.pull_request.head.ref}\`
            
            プレビューは約1〜2分で利用可能になります。
            
            ---
            *このコメントは GitHub Actions により自動生成されています*`;
            
            if (botComment) {
              // 既存のコメントを更新
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // 新しいコメントを作成
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            }

      - name: Comment on deployment failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;
            
            const commentBody = `❌ **Preview Deployment Failed**
            
            プレビュー環境へのデプロイに失敗しました。
            
            📋 **エラー情報:**
            - **Commit:** \`${context.sha.substring(0, 7)}\`
            - **Branch:** \`${context.payload.pull_request.head.ref}\`
            
            詳細は [GitHub Actions のログ](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) をご確認ください。
            
            ---
            *このコメントは GitHub Actions により自動生成されています*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: commentBody
            });